#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":".NET"},{"aliases":["C#","c#"],"languageName":"C#","name":"csharp"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":["frontend"],"name":"vscode"},{"aliases":[],"name":"webview"}]}}

#!csharp

// setup, data generation
#r "nuget: System.Linq.Async"
using System;
using System.Threading;
using System.Threading.Tasks;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Diagnostics;
using System.Reactive;
using System.Reactive.Linq;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using static System.Console;

#!csharp

// Using yield return with an async iterator method:
static async IAsyncEnumerable<T> FromIterator<T>(this IEnumerable<T> ie)
{
    foreach (var i in ie)
    {
        await Task.Delay(100);
        yield return i;
    }
}

// Converting a collection of Task<T> to an IAsyncEnumerable<T>:
static async IAsyncEnumerable<T> FromTasks<T>(this IEnumerable<Task<T>> tasks)
{
    foreach(var task in tasks)
    {
        var result = await task;
        yield return result;
    }
}

// Consume IAsyncEnumerable
var source = Enumerable.Range(1, 9);
var tasks = source.Select(async f => { await Task.Delay(100); return f; });
await foreach(var t in source.FromIterator())
{
    WriteLine(t);
}

#!csharp

// parallelize with Parallel.ForeachAsync(IAsyncEnumerable source) and populate a collection

var newList = new ConcurrentBag<int>();
var parallelOptions = new ParallelOptions() { MaxDegreeOfParallelism = 2 };
var source = Enumerable.Range(0, 20).ToAsyncEnumerable();
await Parallel.ForEachAsync(source, parallelOptions, async (f, g) =>{
    await Task.Delay(1000);
    newList.Add(f);
});

public static void PopulateObservableCollection(this ObservableCollection<int> target, IAsyncEnumerable<int> source)
{
    
}

#!csharp

// parallelize an IAsyncEnumerable with Task.WhenAll
IAsyncEnumerable<int> source = Enumerable.Range(0, 10).ToAsyncEnumerable();
var tasks = await Enumerable.Range(0, 1000).ToAsyncEnumerable().Select(async f => await Task.Delay(1000)).ToListAsync();
await Task.WhenAll(tasks);

#!csharp

//parallelize an IEnumerable of Tasks with WhenAll
var tasks = Enumerable.Range(0, 100).Select(async f => await Task.Delay(1000));
await Task.WhenAll(tasks);

#!csharp

public static void AsyncStream(this ObservableCollection<int> target, IAsyncEnumerable<int> source)
{
    
}

#!csharp

// get project Directory
string workingDirectory = Environment.CurrentDirectory;
string projectDirectory = Directory.GetParent(workingDirectory).Parent.Parent.FullName;
projectDirectory
